
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Referrer
 * 
 */
export type Referrer = $Result.DefaultSelection<Prisma.$ReferrerPayload>
/**
 * Model Referee
 * 
 */
export type Referee = $Result.DefaultSelection<Prisma.$RefereePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Referrers
 * const referrers = await prisma.referrer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Referrers
   * const referrers = await prisma.referrer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.referrer`: Exposes CRUD operations for the **Referrer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referrers
    * const referrers = await prisma.referrer.findMany()
    * ```
    */
  get referrer(): Prisma.ReferrerDelegate<ExtArgs>;

  /**
   * `prisma.referee`: Exposes CRUD operations for the **Referee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referees
    * const referees = await prisma.referee.findMany()
    * ```
    */
  get referee(): Prisma.RefereeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.2
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Referrer: 'Referrer',
    Referee: 'Referee'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "referrer" | "referee"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Referrer: {
        payload: Prisma.$ReferrerPayload<ExtArgs>
        fields: Prisma.ReferrerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferrerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferrerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload>
          }
          findFirst: {
            args: Prisma.ReferrerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferrerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload>
          }
          findMany: {
            args: Prisma.ReferrerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload>[]
          }
          create: {
            args: Prisma.ReferrerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload>
          }
          createMany: {
            args: Prisma.ReferrerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReferrerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload>
          }
          update: {
            args: Prisma.ReferrerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload>
          }
          deleteMany: {
            args: Prisma.ReferrerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferrerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReferrerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferrerPayload>
          }
          aggregate: {
            args: Prisma.ReferrerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferrer>
          }
          groupBy: {
            args: Prisma.ReferrerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferrerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferrerCountArgs<ExtArgs>
            result: $Utils.Optional<ReferrerCountAggregateOutputType> | number
          }
        }
      }
      Referee: {
        payload: Prisma.$RefereePayload<ExtArgs>
        fields: Prisma.RefereeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefereeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefereeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          findFirst: {
            args: Prisma.RefereeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefereeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          findMany: {
            args: Prisma.RefereeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>[]
          }
          create: {
            args: Prisma.RefereeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          createMany: {
            args: Prisma.RefereeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RefereeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          update: {
            args: Prisma.RefereeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          deleteMany: {
            args: Prisma.RefereeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefereeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefereeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefereePayload>
          }
          aggregate: {
            args: Prisma.RefereeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferee>
          }
          groupBy: {
            args: Prisma.RefereeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefereeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefereeCountArgs<ExtArgs>
            result: $Utils.Optional<RefereeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Referrer
   */

  export type AggregateReferrer = {
    _count: ReferrerCountAggregateOutputType | null
    _avg: ReferrerAvgAggregateOutputType | null
    _sum: ReferrerSumAggregateOutputType | null
    _min: ReferrerMinAggregateOutputType | null
    _max: ReferrerMaxAggregateOutputType | null
  }

  export type ReferrerAvgAggregateOutputType = {
    id: number | null
  }

  export type ReferrerSumAggregateOutputType = {
    id: number | null
  }

  export type ReferrerMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    referral_code: string | null
  }

  export type ReferrerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    referral_code: string | null
  }

  export type ReferrerCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    referral_code: number
    _all: number
  }


  export type ReferrerAvgAggregateInputType = {
    id?: true
  }

  export type ReferrerSumAggregateInputType = {
    id?: true
  }

  export type ReferrerMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    referral_code?: true
  }

  export type ReferrerMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    referral_code?: true
  }

  export type ReferrerCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    referral_code?: true
    _all?: true
  }

  export type ReferrerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referrer to aggregate.
     */
    where?: ReferrerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrers to fetch.
     */
    orderBy?: ReferrerOrderByWithRelationInput | ReferrerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferrerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referrers
    **/
    _count?: true | ReferrerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferrerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferrerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferrerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferrerMaxAggregateInputType
  }

  export type GetReferrerAggregateType<T extends ReferrerAggregateArgs> = {
        [P in keyof T & keyof AggregateReferrer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferrer[P]>
      : GetScalarType<T[P], AggregateReferrer[P]>
  }




  export type ReferrerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferrerWhereInput
    orderBy?: ReferrerOrderByWithAggregationInput | ReferrerOrderByWithAggregationInput[]
    by: ReferrerScalarFieldEnum[] | ReferrerScalarFieldEnum
    having?: ReferrerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferrerCountAggregateInputType | true
    _avg?: ReferrerAvgAggregateInputType
    _sum?: ReferrerSumAggregateInputType
    _min?: ReferrerMinAggregateInputType
    _max?: ReferrerMaxAggregateInputType
  }

  export type ReferrerGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    referral_code: string
    _count: ReferrerCountAggregateOutputType | null
    _avg: ReferrerAvgAggregateOutputType | null
    _sum: ReferrerSumAggregateOutputType | null
    _min: ReferrerMinAggregateOutputType | null
    _max: ReferrerMaxAggregateOutputType | null
  }

  type GetReferrerGroupByPayload<T extends ReferrerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferrerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferrerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferrerGroupByOutputType[P]>
            : GetScalarType<T[P], ReferrerGroupByOutputType[P]>
        }
      >
    >


  export type ReferrerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    referral_code?: boolean
    referee?: boolean | Referrer$refereeArgs<ExtArgs>
  }, ExtArgs["result"]["referrer"]>


  export type ReferrerSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    referral_code?: boolean
  }

  export type ReferrerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referee?: boolean | Referrer$refereeArgs<ExtArgs>
  }

  export type $ReferrerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referrer"
    objects: {
      referee: Prisma.$RefereePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      referral_code: string
    }, ExtArgs["result"]["referrer"]>
    composites: {}
  }

  type ReferrerGetPayload<S extends boolean | null | undefined | ReferrerDefaultArgs> = $Result.GetResult<Prisma.$ReferrerPayload, S>

  type ReferrerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReferrerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReferrerCountAggregateInputType | true
    }

  export interface ReferrerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referrer'], meta: { name: 'Referrer' } }
    /**
     * Find zero or one Referrer that matches the filter.
     * @param {ReferrerFindUniqueArgs} args - Arguments to find a Referrer
     * @example
     * // Get one Referrer
     * const referrer = await prisma.referrer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferrerFindUniqueArgs>(args: SelectSubset<T, ReferrerFindUniqueArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Referrer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReferrerFindUniqueOrThrowArgs} args - Arguments to find a Referrer
     * @example
     * // Get one Referrer
     * const referrer = await prisma.referrer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferrerFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferrerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Referrer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferrerFindFirstArgs} args - Arguments to find a Referrer
     * @example
     * // Get one Referrer
     * const referrer = await prisma.referrer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferrerFindFirstArgs>(args?: SelectSubset<T, ReferrerFindFirstArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Referrer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferrerFindFirstOrThrowArgs} args - Arguments to find a Referrer
     * @example
     * // Get one Referrer
     * const referrer = await prisma.referrer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferrerFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferrerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Referrers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferrerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referrers
     * const referrers = await prisma.referrer.findMany()
     * 
     * // Get first 10 Referrers
     * const referrers = await prisma.referrer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referrerWithIdOnly = await prisma.referrer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferrerFindManyArgs>(args?: SelectSubset<T, ReferrerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Referrer.
     * @param {ReferrerCreateArgs} args - Arguments to create a Referrer.
     * @example
     * // Create one Referrer
     * const Referrer = await prisma.referrer.create({
     *   data: {
     *     // ... data to create a Referrer
     *   }
     * })
     * 
     */
    create<T extends ReferrerCreateArgs>(args: SelectSubset<T, ReferrerCreateArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Referrers.
     * @param {ReferrerCreateManyArgs} args - Arguments to create many Referrers.
     * @example
     * // Create many Referrers
     * const referrer = await prisma.referrer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferrerCreateManyArgs>(args?: SelectSubset<T, ReferrerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Referrer.
     * @param {ReferrerDeleteArgs} args - Arguments to delete one Referrer.
     * @example
     * // Delete one Referrer
     * const Referrer = await prisma.referrer.delete({
     *   where: {
     *     // ... filter to delete one Referrer
     *   }
     * })
     * 
     */
    delete<T extends ReferrerDeleteArgs>(args: SelectSubset<T, ReferrerDeleteArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Referrer.
     * @param {ReferrerUpdateArgs} args - Arguments to update one Referrer.
     * @example
     * // Update one Referrer
     * const referrer = await prisma.referrer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferrerUpdateArgs>(args: SelectSubset<T, ReferrerUpdateArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Referrers.
     * @param {ReferrerDeleteManyArgs} args - Arguments to filter Referrers to delete.
     * @example
     * // Delete a few Referrers
     * const { count } = await prisma.referrer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferrerDeleteManyArgs>(args?: SelectSubset<T, ReferrerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferrerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referrers
     * const referrer = await prisma.referrer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferrerUpdateManyArgs>(args: SelectSubset<T, ReferrerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Referrer.
     * @param {ReferrerUpsertArgs} args - Arguments to update or create a Referrer.
     * @example
     * // Update or create a Referrer
     * const referrer = await prisma.referrer.upsert({
     *   create: {
     *     // ... data to create a Referrer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referrer we want to update
     *   }
     * })
     */
    upsert<T extends ReferrerUpsertArgs>(args: SelectSubset<T, ReferrerUpsertArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Referrers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferrerCountArgs} args - Arguments to filter Referrers to count.
     * @example
     * // Count the number of Referrers
     * const count = await prisma.referrer.count({
     *   where: {
     *     // ... the filter for the Referrers we want to count
     *   }
     * })
    **/
    count<T extends ReferrerCountArgs>(
      args?: Subset<T, ReferrerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferrerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referrer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferrerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferrerAggregateArgs>(args: Subset<T, ReferrerAggregateArgs>): Prisma.PrismaPromise<GetReferrerAggregateType<T>>

    /**
     * Group by Referrer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferrerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferrerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferrerGroupByArgs['orderBy'] }
        : { orderBy?: ReferrerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferrerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferrerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referrer model
   */
  readonly fields: ReferrerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referrer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferrerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referee<T extends Referrer$refereeArgs<ExtArgs> = {}>(args?: Subset<T, Referrer$refereeArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referrer model
   */ 
  interface ReferrerFieldRefs {
    readonly id: FieldRef<"Referrer", 'Int'>
    readonly name: FieldRef<"Referrer", 'String'>
    readonly email: FieldRef<"Referrer", 'String'>
    readonly phone: FieldRef<"Referrer", 'String'>
    readonly referral_code: FieldRef<"Referrer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Referrer findUnique
   */
  export type ReferrerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * Filter, which Referrer to fetch.
     */
    where: ReferrerWhereUniqueInput
  }

  /**
   * Referrer findUniqueOrThrow
   */
  export type ReferrerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * Filter, which Referrer to fetch.
     */
    where: ReferrerWhereUniqueInput
  }

  /**
   * Referrer findFirst
   */
  export type ReferrerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * Filter, which Referrer to fetch.
     */
    where?: ReferrerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrers to fetch.
     */
    orderBy?: ReferrerOrderByWithRelationInput | ReferrerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrers.
     */
    cursor?: ReferrerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrers.
     */
    distinct?: ReferrerScalarFieldEnum | ReferrerScalarFieldEnum[]
  }

  /**
   * Referrer findFirstOrThrow
   */
  export type ReferrerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * Filter, which Referrer to fetch.
     */
    where?: ReferrerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrers to fetch.
     */
    orderBy?: ReferrerOrderByWithRelationInput | ReferrerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrers.
     */
    cursor?: ReferrerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrers.
     */
    distinct?: ReferrerScalarFieldEnum | ReferrerScalarFieldEnum[]
  }

  /**
   * Referrer findMany
   */
  export type ReferrerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * Filter, which Referrers to fetch.
     */
    where?: ReferrerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrers to fetch.
     */
    orderBy?: ReferrerOrderByWithRelationInput | ReferrerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referrers.
     */
    cursor?: ReferrerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrers.
     */
    skip?: number
    distinct?: ReferrerScalarFieldEnum | ReferrerScalarFieldEnum[]
  }

  /**
   * Referrer create
   */
  export type ReferrerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * The data needed to create a Referrer.
     */
    data: XOR<ReferrerCreateInput, ReferrerUncheckedCreateInput>
  }

  /**
   * Referrer createMany
   */
  export type ReferrerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referrers.
     */
    data: ReferrerCreateManyInput | ReferrerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referrer update
   */
  export type ReferrerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * The data needed to update a Referrer.
     */
    data: XOR<ReferrerUpdateInput, ReferrerUncheckedUpdateInput>
    /**
     * Choose, which Referrer to update.
     */
    where: ReferrerWhereUniqueInput
  }

  /**
   * Referrer updateMany
   */
  export type ReferrerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referrers.
     */
    data: XOR<ReferrerUpdateManyMutationInput, ReferrerUncheckedUpdateManyInput>
    /**
     * Filter which Referrers to update
     */
    where?: ReferrerWhereInput
  }

  /**
   * Referrer upsert
   */
  export type ReferrerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * The filter to search for the Referrer to update in case it exists.
     */
    where: ReferrerWhereUniqueInput
    /**
     * In case the Referrer found by the `where` argument doesn't exist, create a new Referrer with this data.
     */
    create: XOR<ReferrerCreateInput, ReferrerUncheckedCreateInput>
    /**
     * In case the Referrer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferrerUpdateInput, ReferrerUncheckedUpdateInput>
  }

  /**
   * Referrer delete
   */
  export type ReferrerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
    /**
     * Filter which Referrer to delete.
     */
    where: ReferrerWhereUniqueInput
  }

  /**
   * Referrer deleteMany
   */
  export type ReferrerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referrers to delete
     */
    where?: ReferrerWhereInput
  }

  /**
   * Referrer.referee
   */
  export type Referrer$refereeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    where?: RefereeWhereInput
  }

  /**
   * Referrer without action
   */
  export type ReferrerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referrer
     */
    select?: ReferrerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferrerInclude<ExtArgs> | null
  }


  /**
   * Model Referee
   */

  export type AggregateReferee = {
    _count: RefereeCountAggregateOutputType | null
    _avg: RefereeAvgAggregateOutputType | null
    _sum: RefereeSumAggregateOutputType | null
    _min: RefereeMinAggregateOutputType | null
    _max: RefereeMaxAggregateOutputType | null
  }

  export type RefereeAvgAggregateOutputType = {
    id: number | null
    referrerId: number | null
  }

  export type RefereeSumAggregateOutputType = {
    id: number | null
    referrerId: number | null
  }

  export type RefereeMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    referral_code: string | null
    referrerId: number | null
  }

  export type RefereeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    referral_code: string | null
    referrerId: number | null
  }

  export type RefereeCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    referral_code: number
    referrerId: number
    _all: number
  }


  export type RefereeAvgAggregateInputType = {
    id?: true
    referrerId?: true
  }

  export type RefereeSumAggregateInputType = {
    id?: true
    referrerId?: true
  }

  export type RefereeMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    referral_code?: true
    referrerId?: true
  }

  export type RefereeMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    referral_code?: true
    referrerId?: true
  }

  export type RefereeCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    referral_code?: true
    referrerId?: true
    _all?: true
  }

  export type RefereeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referee to aggregate.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referees
    **/
    _count?: true | RefereeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefereeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefereeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefereeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefereeMaxAggregateInputType
  }

  export type GetRefereeAggregateType<T extends RefereeAggregateArgs> = {
        [P in keyof T & keyof AggregateReferee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferee[P]>
      : GetScalarType<T[P], AggregateReferee[P]>
  }




  export type RefereeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefereeWhereInput
    orderBy?: RefereeOrderByWithAggregationInput | RefereeOrderByWithAggregationInput[]
    by: RefereeScalarFieldEnum[] | RefereeScalarFieldEnum
    having?: RefereeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefereeCountAggregateInputType | true
    _avg?: RefereeAvgAggregateInputType
    _sum?: RefereeSumAggregateInputType
    _min?: RefereeMinAggregateInputType
    _max?: RefereeMaxAggregateInputType
  }

  export type RefereeGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    referral_code: string
    referrerId: number
    _count: RefereeCountAggregateOutputType | null
    _avg: RefereeAvgAggregateOutputType | null
    _sum: RefereeSumAggregateOutputType | null
    _min: RefereeMinAggregateOutputType | null
    _max: RefereeMaxAggregateOutputType | null
  }

  type GetRefereeGroupByPayload<T extends RefereeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefereeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefereeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefereeGroupByOutputType[P]>
            : GetScalarType<T[P], RefereeGroupByOutputType[P]>
        }
      >
    >


  export type RefereeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    referral_code?: boolean
    referrerId?: boolean
    referrer?: boolean | ReferrerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referee"]>


  export type RefereeSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    referral_code?: boolean
    referrerId?: boolean
  }

  export type RefereeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referrer?: boolean | ReferrerDefaultArgs<ExtArgs>
  }

  export type $RefereePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referee"
    objects: {
      referrer: Prisma.$ReferrerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      referral_code: string
      referrerId: number
    }, ExtArgs["result"]["referee"]>
    composites: {}
  }

  type RefereeGetPayload<S extends boolean | null | undefined | RefereeDefaultArgs> = $Result.GetResult<Prisma.$RefereePayload, S>

  type RefereeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefereeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefereeCountAggregateInputType | true
    }

  export interface RefereeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referee'], meta: { name: 'Referee' } }
    /**
     * Find zero or one Referee that matches the filter.
     * @param {RefereeFindUniqueArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefereeFindUniqueArgs>(args: SelectSubset<T, RefereeFindUniqueArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Referee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefereeFindUniqueOrThrowArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefereeFindUniqueOrThrowArgs>(args: SelectSubset<T, RefereeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Referee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindFirstArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefereeFindFirstArgs>(args?: SelectSubset<T, RefereeFindFirstArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Referee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindFirstOrThrowArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefereeFindFirstOrThrowArgs>(args?: SelectSubset<T, RefereeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Referees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referees
     * const referees = await prisma.referee.findMany()
     * 
     * // Get first 10 Referees
     * const referees = await prisma.referee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refereeWithIdOnly = await prisma.referee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefereeFindManyArgs>(args?: SelectSubset<T, RefereeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Referee.
     * @param {RefereeCreateArgs} args - Arguments to create a Referee.
     * @example
     * // Create one Referee
     * const Referee = await prisma.referee.create({
     *   data: {
     *     // ... data to create a Referee
     *   }
     * })
     * 
     */
    create<T extends RefereeCreateArgs>(args: SelectSubset<T, RefereeCreateArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Referees.
     * @param {RefereeCreateManyArgs} args - Arguments to create many Referees.
     * @example
     * // Create many Referees
     * const referee = await prisma.referee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefereeCreateManyArgs>(args?: SelectSubset<T, RefereeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Referee.
     * @param {RefereeDeleteArgs} args - Arguments to delete one Referee.
     * @example
     * // Delete one Referee
     * const Referee = await prisma.referee.delete({
     *   where: {
     *     // ... filter to delete one Referee
     *   }
     * })
     * 
     */
    delete<T extends RefereeDeleteArgs>(args: SelectSubset<T, RefereeDeleteArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Referee.
     * @param {RefereeUpdateArgs} args - Arguments to update one Referee.
     * @example
     * // Update one Referee
     * const referee = await prisma.referee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefereeUpdateArgs>(args: SelectSubset<T, RefereeUpdateArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Referees.
     * @param {RefereeDeleteManyArgs} args - Arguments to filter Referees to delete.
     * @example
     * // Delete a few Referees
     * const { count } = await prisma.referee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefereeDeleteManyArgs>(args?: SelectSubset<T, RefereeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referees
     * const referee = await prisma.referee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefereeUpdateManyArgs>(args: SelectSubset<T, RefereeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Referee.
     * @param {RefereeUpsertArgs} args - Arguments to update or create a Referee.
     * @example
     * // Update or create a Referee
     * const referee = await prisma.referee.upsert({
     *   create: {
     *     // ... data to create a Referee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referee we want to update
     *   }
     * })
     */
    upsert<T extends RefereeUpsertArgs>(args: SelectSubset<T, RefereeUpsertArgs<ExtArgs>>): Prisma__RefereeClient<$Result.GetResult<Prisma.$RefereePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Referees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeCountArgs} args - Arguments to filter Referees to count.
     * @example
     * // Count the number of Referees
     * const count = await prisma.referee.count({
     *   where: {
     *     // ... the filter for the Referees we want to count
     *   }
     * })
    **/
    count<T extends RefereeCountArgs>(
      args?: Subset<T, RefereeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefereeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefereeAggregateArgs>(args: Subset<T, RefereeAggregateArgs>): Prisma.PrismaPromise<GetRefereeAggregateType<T>>

    /**
     * Group by Referee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefereeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefereeGroupByArgs['orderBy'] }
        : { orderBy?: RefereeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefereeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefereeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referee model
   */
  readonly fields: RefereeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefereeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referrer<T extends ReferrerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReferrerDefaultArgs<ExtArgs>>): Prisma__ReferrerClient<$Result.GetResult<Prisma.$ReferrerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referee model
   */ 
  interface RefereeFieldRefs {
    readonly id: FieldRef<"Referee", 'Int'>
    readonly name: FieldRef<"Referee", 'String'>
    readonly email: FieldRef<"Referee", 'String'>
    readonly phone: FieldRef<"Referee", 'String'>
    readonly referral_code: FieldRef<"Referee", 'String'>
    readonly referrerId: FieldRef<"Referee", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Referee findUnique
   */
  export type RefereeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee findUniqueOrThrow
   */
  export type RefereeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee findFirst
   */
  export type RefereeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referees.
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referees.
     */
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Referee findFirstOrThrow
   */
  export type RefereeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referee to fetch.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referees.
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referees.
     */
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Referee findMany
   */
  export type RefereeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter, which Referees to fetch.
     */
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     */
    orderBy?: RefereeOrderByWithRelationInput | RefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referees.
     */
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     */
    skip?: number
    distinct?: RefereeScalarFieldEnum | RefereeScalarFieldEnum[]
  }

  /**
   * Referee create
   */
  export type RefereeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * The data needed to create a Referee.
     */
    data: XOR<RefereeCreateInput, RefereeUncheckedCreateInput>
  }

  /**
   * Referee createMany
   */
  export type RefereeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referees.
     */
    data: RefereeCreateManyInput | RefereeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referee update
   */
  export type RefereeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * The data needed to update a Referee.
     */
    data: XOR<RefereeUpdateInput, RefereeUncheckedUpdateInput>
    /**
     * Choose, which Referee to update.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee updateMany
   */
  export type RefereeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referees.
     */
    data: XOR<RefereeUpdateManyMutationInput, RefereeUncheckedUpdateManyInput>
    /**
     * Filter which Referees to update
     */
    where?: RefereeWhereInput
  }

  /**
   * Referee upsert
   */
  export type RefereeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * The filter to search for the Referee to update in case it exists.
     */
    where: RefereeWhereUniqueInput
    /**
     * In case the Referee found by the `where` argument doesn't exist, create a new Referee with this data.
     */
    create: XOR<RefereeCreateInput, RefereeUncheckedCreateInput>
    /**
     * In case the Referee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefereeUpdateInput, RefereeUncheckedUpdateInput>
  }

  /**
   * Referee delete
   */
  export type RefereeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
    /**
     * Filter which Referee to delete.
     */
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee deleteMany
   */
  export type RefereeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referees to delete
     */
    where?: RefereeWhereInput
  }

  /**
   * Referee without action
   */
  export type RefereeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referee
     */
    select?: RefereeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefereeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ReferrerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    referral_code: 'referral_code'
  };

  export type ReferrerScalarFieldEnum = (typeof ReferrerScalarFieldEnum)[keyof typeof ReferrerScalarFieldEnum]


  export const RefereeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    referral_code: 'referral_code',
    referrerId: 'referrerId'
  };

  export type RefereeScalarFieldEnum = (typeof RefereeScalarFieldEnum)[keyof typeof RefereeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ReferrerWhereInput = {
    AND?: ReferrerWhereInput | ReferrerWhereInput[]
    OR?: ReferrerWhereInput[]
    NOT?: ReferrerWhereInput | ReferrerWhereInput[]
    id?: IntFilter<"Referrer"> | number
    name?: StringFilter<"Referrer"> | string
    email?: StringFilter<"Referrer"> | string
    phone?: StringFilter<"Referrer"> | string
    referral_code?: StringFilter<"Referrer"> | string
    referee?: XOR<RefereeNullableRelationFilter, RefereeWhereInput> | null
  }

  export type ReferrerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
    referee?: RefereeOrderByWithRelationInput
  }

  export type ReferrerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    referral_code?: string
    AND?: ReferrerWhereInput | ReferrerWhereInput[]
    OR?: ReferrerWhereInput[]
    NOT?: ReferrerWhereInput | ReferrerWhereInput[]
    name?: StringFilter<"Referrer"> | string
    phone?: StringFilter<"Referrer"> | string
    referee?: XOR<RefereeNullableRelationFilter, RefereeWhereInput> | null
  }, "id" | "email" | "referral_code">

  export type ReferrerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
    _count?: ReferrerCountOrderByAggregateInput
    _avg?: ReferrerAvgOrderByAggregateInput
    _max?: ReferrerMaxOrderByAggregateInput
    _min?: ReferrerMinOrderByAggregateInput
    _sum?: ReferrerSumOrderByAggregateInput
  }

  export type ReferrerScalarWhereWithAggregatesInput = {
    AND?: ReferrerScalarWhereWithAggregatesInput | ReferrerScalarWhereWithAggregatesInput[]
    OR?: ReferrerScalarWhereWithAggregatesInput[]
    NOT?: ReferrerScalarWhereWithAggregatesInput | ReferrerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Referrer"> | number
    name?: StringWithAggregatesFilter<"Referrer"> | string
    email?: StringWithAggregatesFilter<"Referrer"> | string
    phone?: StringWithAggregatesFilter<"Referrer"> | string
    referral_code?: StringWithAggregatesFilter<"Referrer"> | string
  }

  export type RefereeWhereInput = {
    AND?: RefereeWhereInput | RefereeWhereInput[]
    OR?: RefereeWhereInput[]
    NOT?: RefereeWhereInput | RefereeWhereInput[]
    id?: IntFilter<"Referee"> | number
    name?: StringFilter<"Referee"> | string
    email?: StringFilter<"Referee"> | string
    phone?: StringFilter<"Referee"> | string
    referral_code?: StringFilter<"Referee"> | string
    referrerId?: IntFilter<"Referee"> | number
    referrer?: XOR<ReferrerRelationFilter, ReferrerWhereInput>
  }

  export type RefereeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
    referrerId?: SortOrder
    referrer?: ReferrerOrderByWithRelationInput
  }

  export type RefereeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    referral_code?: string
    referrerId?: number
    AND?: RefereeWhereInput | RefereeWhereInput[]
    OR?: RefereeWhereInput[]
    NOT?: RefereeWhereInput | RefereeWhereInput[]
    name?: StringFilter<"Referee"> | string
    phone?: StringFilter<"Referee"> | string
    referrer?: XOR<ReferrerRelationFilter, ReferrerWhereInput>
  }, "id" | "email" | "referral_code" | "referrerId">

  export type RefereeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
    referrerId?: SortOrder
    _count?: RefereeCountOrderByAggregateInput
    _avg?: RefereeAvgOrderByAggregateInput
    _max?: RefereeMaxOrderByAggregateInput
    _min?: RefereeMinOrderByAggregateInput
    _sum?: RefereeSumOrderByAggregateInput
  }

  export type RefereeScalarWhereWithAggregatesInput = {
    AND?: RefereeScalarWhereWithAggregatesInput | RefereeScalarWhereWithAggregatesInput[]
    OR?: RefereeScalarWhereWithAggregatesInput[]
    NOT?: RefereeScalarWhereWithAggregatesInput | RefereeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Referee"> | number
    name?: StringWithAggregatesFilter<"Referee"> | string
    email?: StringWithAggregatesFilter<"Referee"> | string
    phone?: StringWithAggregatesFilter<"Referee"> | string
    referral_code?: StringWithAggregatesFilter<"Referee"> | string
    referrerId?: IntWithAggregatesFilter<"Referee"> | number
  }

  export type ReferrerCreateInput = {
    name: string
    email: string
    phone: string
    referral_code: string
    referee?: RefereeCreateNestedOneWithoutReferrerInput
  }

  export type ReferrerUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    referral_code: string
    referee?: RefereeUncheckedCreateNestedOneWithoutReferrerInput
  }

  export type ReferrerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
    referee?: RefereeUpdateOneWithoutReferrerNestedInput
  }

  export type ReferrerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
    referee?: RefereeUncheckedUpdateOneWithoutReferrerNestedInput
  }

  export type ReferrerCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    referral_code: string
  }

  export type ReferrerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
  }

  export type ReferrerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
  }

  export type RefereeCreateInput = {
    name: string
    email: string
    phone: string
    referral_code: string
    referrer: ReferrerCreateNestedOneWithoutRefereeInput
  }

  export type RefereeUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    referral_code: string
    referrerId: number
  }

  export type RefereeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
    referrer?: ReferrerUpdateOneRequiredWithoutRefereeNestedInput
  }

  export type RefereeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
    referrerId?: IntFieldUpdateOperationsInput | number
  }

  export type RefereeCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    referral_code: string
    referrerId: number
  }

  export type RefereeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
  }

  export type RefereeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
    referrerId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RefereeNullableRelationFilter = {
    is?: RefereeWhereInput | null
    isNot?: RefereeWhereInput | null
  }

  export type ReferrerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
  }

  export type ReferrerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReferrerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
  }

  export type ReferrerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
  }

  export type ReferrerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ReferrerRelationFilter = {
    is?: ReferrerWhereInput
    isNot?: ReferrerWhereInput
  }

  export type RefereeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
    referrerId?: SortOrder
  }

  export type RefereeAvgOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
  }

  export type RefereeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
    referrerId?: SortOrder
  }

  export type RefereeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    referral_code?: SortOrder
    referrerId?: SortOrder
  }

  export type RefereeSumOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
  }

  export type RefereeCreateNestedOneWithoutReferrerInput = {
    create?: XOR<RefereeCreateWithoutReferrerInput, RefereeUncheckedCreateWithoutReferrerInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutReferrerInput
    connect?: RefereeWhereUniqueInput
  }

  export type RefereeUncheckedCreateNestedOneWithoutReferrerInput = {
    create?: XOR<RefereeCreateWithoutReferrerInput, RefereeUncheckedCreateWithoutReferrerInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutReferrerInput
    connect?: RefereeWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RefereeUpdateOneWithoutReferrerNestedInput = {
    create?: XOR<RefereeCreateWithoutReferrerInput, RefereeUncheckedCreateWithoutReferrerInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutReferrerInput
    upsert?: RefereeUpsertWithoutReferrerInput
    disconnect?: RefereeWhereInput | boolean
    delete?: RefereeWhereInput | boolean
    connect?: RefereeWhereUniqueInput
    update?: XOR<XOR<RefereeUpdateToOneWithWhereWithoutReferrerInput, RefereeUpdateWithoutReferrerInput>, RefereeUncheckedUpdateWithoutReferrerInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RefereeUncheckedUpdateOneWithoutReferrerNestedInput = {
    create?: XOR<RefereeCreateWithoutReferrerInput, RefereeUncheckedCreateWithoutReferrerInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutReferrerInput
    upsert?: RefereeUpsertWithoutReferrerInput
    disconnect?: RefereeWhereInput | boolean
    delete?: RefereeWhereInput | boolean
    connect?: RefereeWhereUniqueInput
    update?: XOR<XOR<RefereeUpdateToOneWithWhereWithoutReferrerInput, RefereeUpdateWithoutReferrerInput>, RefereeUncheckedUpdateWithoutReferrerInput>
  }

  export type ReferrerCreateNestedOneWithoutRefereeInput = {
    create?: XOR<ReferrerCreateWithoutRefereeInput, ReferrerUncheckedCreateWithoutRefereeInput>
    connectOrCreate?: ReferrerCreateOrConnectWithoutRefereeInput
    connect?: ReferrerWhereUniqueInput
  }

  export type ReferrerUpdateOneRequiredWithoutRefereeNestedInput = {
    create?: XOR<ReferrerCreateWithoutRefereeInput, ReferrerUncheckedCreateWithoutRefereeInput>
    connectOrCreate?: ReferrerCreateOrConnectWithoutRefereeInput
    upsert?: ReferrerUpsertWithoutRefereeInput
    connect?: ReferrerWhereUniqueInput
    update?: XOR<XOR<ReferrerUpdateToOneWithWhereWithoutRefereeInput, ReferrerUpdateWithoutRefereeInput>, ReferrerUncheckedUpdateWithoutRefereeInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type RefereeCreateWithoutReferrerInput = {
    name: string
    email: string
    phone: string
    referral_code: string
  }

  export type RefereeUncheckedCreateWithoutReferrerInput = {
    id?: number
    name: string
    email: string
    phone: string
    referral_code: string
  }

  export type RefereeCreateOrConnectWithoutReferrerInput = {
    where: RefereeWhereUniqueInput
    create: XOR<RefereeCreateWithoutReferrerInput, RefereeUncheckedCreateWithoutReferrerInput>
  }

  export type RefereeUpsertWithoutReferrerInput = {
    update: XOR<RefereeUpdateWithoutReferrerInput, RefereeUncheckedUpdateWithoutReferrerInput>
    create: XOR<RefereeCreateWithoutReferrerInput, RefereeUncheckedCreateWithoutReferrerInput>
    where?: RefereeWhereInput
  }

  export type RefereeUpdateToOneWithWhereWithoutReferrerInput = {
    where?: RefereeWhereInput
    data: XOR<RefereeUpdateWithoutReferrerInput, RefereeUncheckedUpdateWithoutReferrerInput>
  }

  export type RefereeUpdateWithoutReferrerInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
  }

  export type RefereeUncheckedUpdateWithoutReferrerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
  }

  export type ReferrerCreateWithoutRefereeInput = {
    name: string
    email: string
    phone: string
    referral_code: string
  }

  export type ReferrerUncheckedCreateWithoutRefereeInput = {
    id?: number
    name: string
    email: string
    phone: string
    referral_code: string
  }

  export type ReferrerCreateOrConnectWithoutRefereeInput = {
    where: ReferrerWhereUniqueInput
    create: XOR<ReferrerCreateWithoutRefereeInput, ReferrerUncheckedCreateWithoutRefereeInput>
  }

  export type ReferrerUpsertWithoutRefereeInput = {
    update: XOR<ReferrerUpdateWithoutRefereeInput, ReferrerUncheckedUpdateWithoutRefereeInput>
    create: XOR<ReferrerCreateWithoutRefereeInput, ReferrerUncheckedCreateWithoutRefereeInput>
    where?: ReferrerWhereInput
  }

  export type ReferrerUpdateToOneWithWhereWithoutRefereeInput = {
    where?: ReferrerWhereInput
    data: XOR<ReferrerUpdateWithoutRefereeInput, ReferrerUncheckedUpdateWithoutRefereeInput>
  }

  export type ReferrerUpdateWithoutRefereeInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
  }

  export type ReferrerUncheckedUpdateWithoutRefereeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    referral_code?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ReferrerDefaultArgs instead
     */
    export type ReferrerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReferrerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefereeDefaultArgs instead
     */
    export type RefereeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefereeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}